# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-18.04'

variables:
  - name: disable.coverage.autogenerate
    value: 'true'

steps:

- script: cp $(Build.SourcesDirectory)/IntegrationTests/TechnikumDirekt.IntegrationTests/appsettings_default.json $(Build.SourcesDirectory)/IntegrationTests/TechnikumDirekt.IntegrationTests/appsettings.json
  displayName: Copy appsettings file for IntegrationTestsProject (needs to be present at build phase)

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'

- script: dotnet tool install --tool-path tools dotnet-ef
  displayName: 'Install dotnet ef'
  continueOnError: true

- script: cp $(Build.SourcesDirectory)/Services/TechnikumDirekt.Services/appsettings_default.json $(Build.SourcesDirectory)/Services/TechnikumDirekt.Services/appsettings.json
  displayName: Copy appsettings file

- script: ./tools/dotnet-ef migrations script --output $(Build.ArtifactStagingDirectory)/SQL/migrationScript.sql --startup-project $(Build.SourcesDirectory)/Services/TechnikumDirekt.Services --project $(Build.SourcesDirectory)/DataAccess/TechnikumDirekt.DataAccess.Sql --idempotent
  displayName: Generate SQL Migration Script

- task: DotNetCoreCLI@2
  displayName: Publish (create)
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

- task: DotNetCoreCLI@2
  displayName: Run Tests
  inputs:
    command: test
    arguments: '--configuration $(BuildConfiguration) --collect "XPlat Code coverage" -- RunConfiguration.DisableAppDomain=true'
    projects: |
     '**/*Test*.csproj'
      '**/*IntegrationTest*.csproj'
    publishTestResults: true

- script: dotnet tool install --tool-path tools dotnet-reportgenerator-globaltool --version 4.6.7
  displayName: 'Install ReportGenerator tool'
  continueOnError: true

- script: ./tools/reportgenerator "-classfilters:+TechnikumDirekt.ServiceAgents.*Agent;+TechnikumDirekt.Services.Controllers.*;+TechnikumDirekt.BusinessLogic.*Logic;+TechnikumDirekt.DataAccess.Sql.*Repo*" "-reports:$(Agent.TempDirectory)/**/*Cobertura.xml" "-targetdir:$(Build.SourcesDirectory)/coverlet/reports" "-reporttypes:Cobertura;HtmlInline_AzurePipelines"
  displayName: 'Run ReportGenerator tool'

- task: PublishCodeCoverageResults@1.175.0
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/*Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/coverlet/reports'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'TechnikumDirektApi'